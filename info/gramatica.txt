INÍCIO-> 	{DECL_A | COMANDO} eof

DECL_A-> 	(int | float | string | char) DECL_B {,DECL_B} ;	|
			const id = TIPO_DECL;

DECL_B-> 		id [<- TIPO_DECL ]
TIPO_DECL-> 	[-]num | string | hexa | caractere

COMANDO->	id ["[" EXP_A "]"] <- EXP_A;		    	|
			while EXP_A TIPO_CMD				        |
			if EXP_A TIPO_CMD [else TIPO_CMD]			|
			readln "(" id ")";				            |
			(write | writeln) "(" LISTA_EXP ")";		|
			;

TIPO_CMD->	COMANDO | "{" {COMANDO}+ "}"
LISTA_EXP->	EXP_A {, EXP_A}
OPERADOR->    	= | != | < | > | <= | >=

EXP_A-> 	EXP_B {OPERADOR EXP_B}
EXP_B->		[-] EXP_C { (+ | - | "||") EXP_C }
EXP_C->		EXP_D { ("*" | && | / | div | mod) EXP_D }
EXP_D->		{!} EXP_E
EXP_E->		(int | float) "(" EXP_A ")" | EXP_F
EXP_F->     "(" EXP_A ")" | id ["[" EXP_A "]"] | valor